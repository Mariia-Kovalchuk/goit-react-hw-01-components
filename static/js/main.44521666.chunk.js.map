{"version":3,"sources":["components/friend-list/FriendList.js","components/social-profile/Profile.js","components/statistics/Statistics.js","components/transaction-history/TransactionHistory.js","App.js","index.js"],"names":["FriendList","friends","className","map","avatar","name","isOnline","id","src","alt","width","Profile","tag","location","stats","followers","views","likes","Statistics","title","label","percentage","TransactionHistory","transactions","type","amount","currency","App","user","statisticalData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gxGA+BeA,EAxBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACf,oBAAIC,UAAU,cAAd,SACKD,EAAQE,KAAI,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,SAAUC,EAA1B,EAA0BA,GAA1B,OACT,qBAAIL,UAAU,OAAd,UACI,sBAAMA,UAAU,SAAhB,SAA2BI,IAC3B,qBAAKJ,UAAU,SAASM,IAAKJ,EAAQK,IAAKJ,EAAMK,MAAM,OACtD,mBAAGR,UAAU,OAAb,SAAsBG,MAHEE,S,OCoCzBI,EA1CC,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAMO,EAAT,EAASA,IAAKC,EAAd,EAAcA,SAAUT,EAAxB,EAAwBA,OAAQU,EAAhC,EAAgCA,MAAhC,OACd,sBAAKZ,UAAU,UAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBACEM,IAAKJ,EACLK,IAAKJ,EACLH,UAAU,WAEZ,oBAAGA,UAAU,OAAb,cAAsBG,KACtB,oBAAGH,UAAU,MAAb,cAAqBU,KACrB,mBAAGV,UAAU,WAAb,SAAyBW,OAG3B,qBAAIX,UAAU,QAAd,UACE,+BACE,sBAAMA,UAAU,QAAhB,uBACA,sBAAMA,UAAU,WAAhB,SAA4BY,EAAMC,eAEpC,+BACE,sBAAMb,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BY,EAAME,WAEpC,+BACE,sBAAMd,UAAU,QAAhB,mBACA,sBAAMA,UAAU,WAAhB,SAA4BY,EAAMG,kB,OCO3BC,EAzBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOL,EAAT,EAASA,MAAT,OACjB,0BAASZ,UAAU,aAAnB,UACGiB,GAAS,oBAAIjB,UAAU,QAAd,SAAuBiB,IACjC,oBAAIjB,UAAU,YAAd,SACGY,EAAMX,KAAI,gBAAEI,EAAF,EAAEA,GAAIa,EAAN,EAAMA,MAAOC,EAAb,EAAaA,WAAb,OACX,qBAAInB,UAAU,OAAd,UACE,sBAAMA,UAAU,QAAhB,SAAyBkB,IACzB,uBAAMlB,UAAU,aAAhB,UAA8BmB,EAA9B,UAFwBd,Y,OCoBjBe,EAhCY,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAH,OACvB,wBAAOrB,UAAU,sBAAjB,UACI,gCACI,+BACI,sCACA,wCACA,+CAIR,gCACKqB,EAAapB,KAAI,gBAAGI,EAAH,EAAGA,GAAIiB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAQC,EAArB,EAAqBA,SAArB,OACd,+BACI,6BAAKF,IACL,6BAAKC,IACL,6BAAKC,MAHAnB,Y,OCcVoB,EAnBH,WACR,OACI,gCACI,cAAC,EAAD,CACItB,KAAMuB,EAAKvB,KACXO,IAAKgB,EAAKhB,IACVC,SAAUe,EAAKf,SACfT,OAAQwB,EAAKxB,OACbU,MAAOc,EAAKd,QAEhB,cAAC,EAAD,CAAYK,MAAM,eAAeL,MAAOe,IACxC,cAAC,EAAD,CAAY5B,QAASA,IACrB,cAAC,EAAD,CAAmBsB,aAAcA,QClB7CO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.44521666.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n// isOnline - буль сигнализирующий о состоянии друга, в сети или нет.\r\n// В зависимости от пропа isOnline, должен меняться цвет фона span.status. Это можно сделать через разный CSS-класс или Styled Components.\r\n\r\nconst FriendList = ({ friends }) =>\r\n    <ul className=\"friend-list\">\r\n        {friends.map(({avatar, name, isOnline, id}) =>\r\n            <li className=\"item\" key = {id}>\r\n                <span className=\"status\">{ isOnline}</span>\r\n                <img className=\"avatar\" src={avatar} alt={name} width=\"48\" />\r\n                <p className=\"name\">{ name}</p>\r\n            </li >\r\n        \r\n        )}\r\n\r\n    </ul >\r\n\r\n    ;\r\n\r\nFriendList.propTypes = {\r\n    friends: PropTypes.arrayOf(PropTypes.shape({\r\n        avatar: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        isOnline: PropTypes.bool.isRequired,\r\n        id: PropTypes.number.isRequired\r\n       })).isRequired \r\n    }\r\n\r\nexport default FriendList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nconst Profile = ({ name, tag, location, avatar, stats }) =>     \r\n  <div className=\"profile\">\r\n    <div className=\"description\">\r\n      <img\r\n        src={avatar}\r\n        alt={name}\r\n        className=\"avatar\"\r\n      />\r\n      <p className=\"name\"> {name}</p>\r\n      <p className=\"tag\">@{tag}</p>\r\n      <p className=\"location\">{location}</p>\r\n    </div>\r\n\r\n    <ul className=\"stats\">\r\n      <li>\r\n        <span className=\"label\">Followers</span>\r\n        <span className=\"quantity\">{stats.followers}</span>\r\n      </li>\r\n      <li>\r\n        <span className=\"label\">Views</span>\r\n        <span className=\"quantity\">{stats.views}</span>\r\n      </li>\r\n      <li>\r\n        <span className=\"label\">Likes</span>\r\n        <span className=\"quantity\">{stats.likes}</span>\r\n      </li>\r\n    </ul>\r\n    </div>\r\n  ;\r\n\r\nProfile.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  avatar: PropTypes.string.isRequired,\r\n  stats: PropTypes.shape({\r\n    followers: PropTypes.number.isRequired,\r\n    views: PropTypes.number.isRequired,\r\n    likes: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\n// stats - массив объектов содержащих информацию о элементе статистики. Может иметь произвольное кол-во элементов. \r\n// Постараться убрать повторения в масссиве с одинаковым типом и сможить их значения\r\n// Цвет фона элемента статистики в оформлении можно пропустить, либо создать функцию для генерации случайного цвета.\r\n\r\n\r\n\r\nconst Statistics = ({title, stats}) =>\r\n  <section className=\"statistics\">\r\n    {title && <h2 className=\"title\">{title}</h2> }\r\n    <ul className=\"stat-list\">\r\n      {stats.map(({id, label, percentage }) => \r\n      <li className=\"item\" key={id}>\r\n        <span className=\"label\">{label}</span>\r\n        <span className=\"percentage\">{percentage} %</span>\r\n      </li>\r\n      )}\r\n    </ul>\r\n  </section >\r\n  ;\r\n\r\n\r\nStatistics.propTypes = {\r\n  title: PropTypes.string,\r\n  stats: PropTypes.arrayOf(PropTypes.exact({\r\n    id: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    percentage: PropTypes.number.isRequired\r\n  })).isRequired\r\n    \r\n  }\r\n    \r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TransactionHistory = ({ transactions }) =>\r\n    <table className=\"transaction-history\">\r\n        <thead>\r\n            <tr>\r\n                <th>Type</th>\r\n                <th>Amount</th>\r\n                <th>Currency</th>\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n            {transactions.map(({ id, type, amount, currency }) =>\r\n                <tr key={id}>\r\n                    <td>{type}</td>\r\n                    <td>{amount}</td>\r\n                    <td>{currency}</td>\r\n                </tr>\r\n            \r\n            )}\r\n        </tbody>\r\n    </table >\r\n    ;\r\n    \r\nTransactionHistory.propTypes = {\r\n    transactions: PropTypes.arrayOf(PropTypes.shape({\r\n        type: PropTypes.string.isRequired,\r\n        amount: PropTypes.string.isRequired,\r\n        currency: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired\r\n    })).isRequired\r\n};\r\n\r\nexport default TransactionHistory;","import React from \"react\";\r\nimport FriendList from './components/friend-list/FriendList';\r\nimport friends from './components/friend-list/friends.json';\r\nimport Profile from \"./components/social-profile/Profile\";\r\nimport user from \"./components/social-profile/user.json\";\r\nimport Statistics from './components/statistics/Statistics';\r\nimport statisticalData from './components/statistics/statistical-data.json';\r\nimport TransactionHistry from './components/transaction-history/TransactionHistory';\r\nimport transactions from './components/transaction-history/transactions.json';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Profile\r\n                name={user.name}\r\n                tag={user.tag}\r\n                location={user.location}\r\n                avatar={user.avatar}\r\n                stats={user.stats}\r\n            />\r\n            <Statistics title=\"Upload stats\" stats={statisticalData} />\r\n            <FriendList friends={friends} />\r\n            <TransactionHistry transactions={transactions} />\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}